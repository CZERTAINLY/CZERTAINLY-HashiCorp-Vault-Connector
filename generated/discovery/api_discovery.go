/*
 * CZERTAINLY Discovery Provider API
 *
 * REST API for implementations of custom Discovery Provider
 *
 * API version: 2.11.0
 * Contact: getinfo@czertainly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package discovery

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DiscoveryAPIController binds http requests to an api service and writes the service results to the http response
type DiscoveryAPIController struct {
	service      DiscoveryAPIServicer
	errorHandler ErrorHandler
}

// DiscoveryAPIOption for how the controller is set up.
type DiscoveryAPIOption func(*DiscoveryAPIController)

// WithDiscoveryAPIErrorHandler inject ErrorHandler into controller
func WithDiscoveryAPIErrorHandler(h ErrorHandler) DiscoveryAPIOption {
	return func(c *DiscoveryAPIController) {
		c.errorHandler = h
	}
}

// NewDiscoveryAPIController creates a default api controller
func NewDiscoveryAPIController(s DiscoveryAPIServicer, opts ...DiscoveryAPIOption) Router {
	controller := &DiscoveryAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DiscoveryAPIController
func (c *DiscoveryAPIController) Routes() Routes {
	return Routes{
		"DeleteDiscovery": Route{
			strings.ToUpper("Delete"),
			"/v1/discoveryProvider/discover/{uuid}",
			c.DeleteDiscovery,
		},
		"DiscoverCertificate": Route{
			strings.ToUpper("Post"),
			"/v1/discoveryProvider/discover",
			c.DiscoverCertificate,
		},
		"GetDiscovery": Route{
			strings.ToUpper("Post"),
			"/v1/discoveryProvider/discover/{uuid}",
			c.GetDiscovery,
		},
	}
}

// DeleteDiscovery - Delete Discovery
func (c *DiscoveryAPIController) DeleteDiscovery(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.DeleteDiscovery(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DiscoverCertificate - Initiate certificate Discovery
func (c *DiscoveryAPIController) DiscoverCertificate(w http.ResponseWriter, r *http.Request) {
	discoveryRequestDtoParam := DiscoveryRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&discoveryRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDiscoveryRequestDtoRequired(discoveryRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDiscoveryRequestDtoConstraints(discoveryRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DiscoverCertificate(r.Context(), discoveryRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDiscovery - Get Discovery status and result
func (c *DiscoveryAPIController) GetDiscovery(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	discoveryDataRequestDtoParam := DiscoveryDataRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&discoveryDataRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDiscoveryDataRequestDtoRequired(discoveryDataRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDiscoveryDataRequestDtoConstraints(discoveryDataRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetDiscovery(r.Context(), uuidParam, discoveryDataRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
