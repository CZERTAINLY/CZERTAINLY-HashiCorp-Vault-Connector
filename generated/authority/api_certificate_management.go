/*
 * CZERTAINLY Authority Provider v2 API
 *
 * REST API for implementations of custom v2 Authority Provider
 *
 * API version: 2.11.0
 * Contact: getinfo@czertainly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package authority

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CertificateManagementAPIController binds http requests to an api service and writes the service results to the http response
type CertificateManagementAPIController struct {
	service      CertificateManagementAPIServicer
	errorHandler ErrorHandler
}

// CertificateManagementAPIOption for how the controller is set up.
type CertificateManagementAPIOption func(*CertificateManagementAPIController)

// WithCertificateManagementAPIErrorHandler inject ErrorHandler into controller
func WithCertificateManagementAPIErrorHandler(h ErrorHandler) CertificateManagementAPIOption {
	return func(c *CertificateManagementAPIController) {
		c.errorHandler = h
	}
}

// NewCertificateManagementAPIController creates a default api controller
func NewCertificateManagementAPIController(s CertificateManagementAPIServicer, opts ...CertificateManagementAPIOption) Router {
	controller := &CertificateManagementAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CertificateManagementAPIController
func (c *CertificateManagementAPIController) Routes() Routes {
	return Routes{
		"IdentifyCertificate": Route{
			strings.ToUpper("Post"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/identify",
			c.IdentifyCertificate,
		},
		"IssueCertificate": Route{
			strings.ToUpper("Post"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/issue",
			c.IssueCertificate,
		},
		"ListIssueCertificateAttributes": Route{
			strings.ToUpper("Get"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/issue/attributes",
			c.ListIssueCertificateAttributes,
		},
		"ListRevokeCertificateAttributes": Route{
			strings.ToUpper("Get"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/revoke/attributes",
			c.ListRevokeCertificateAttributes,
		},
		"RenewCertificate": Route{
			strings.ToUpper("Post"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/renew",
			c.RenewCertificate,
		},
		"RevokeCertificate": Route{
			strings.ToUpper("Post"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/revoke",
			c.RevokeCertificate,
		},
		"ValidateIssueCertificateAttributes": Route{
			strings.ToUpper("Post"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/issue/attributes/validate",
			c.ValidateIssueCertificateAttributes,
		},
		"ValidateRevokeCertificateAttributes": Route{
			strings.ToUpper("Post"),
			"/v2/authorityProvider/authorities/{uuid}/certificates/revoke/attributes/validate",
			c.ValidateRevokeCertificateAttributes,
		},
	}
}

// IdentifyCertificate - Identify Certificate
func (c *CertificateManagementAPIController) IdentifyCertificate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	certificateIdentificationRequestDtoParam := CertificateIdentificationRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&certificateIdentificationRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCertificateIdentificationRequestDtoRequired(certificateIdentificationRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCertificateIdentificationRequestDtoConstraints(certificateIdentificationRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IdentifyCertificate(r.Context(), uuidParam, certificateIdentificationRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IssueCertificate - Issue Certificate
func (c *CertificateManagementAPIController) IssueCertificate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	certificateSignRequestDtoParam := CertificateSignRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&certificateSignRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCertificateSignRequestDtoRequired(certificateSignRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCertificateSignRequestDtoConstraints(certificateSignRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IssueCertificate(r.Context(), uuidParam, certificateSignRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListIssueCertificateAttributes - List of Attributes to issue Certificate
func (c *CertificateManagementAPIController) ListIssueCertificateAttributes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.ListIssueCertificateAttributes(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListRevokeCertificateAttributes - List of Attributes to revoke Certificate
func (c *CertificateManagementAPIController) ListRevokeCertificateAttributes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	result, err := c.service.ListRevokeCertificateAttributes(r.Context(), uuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RenewCertificate - Renew Certificate
func (c *CertificateManagementAPIController) RenewCertificate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	certificateRenewRequestDtoParam := CertificateRenewRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&certificateRenewRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCertificateRenewRequestDtoRequired(certificateRenewRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCertificateRenewRequestDtoConstraints(certificateRenewRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RenewCertificate(r.Context(), uuidParam, certificateRenewRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RevokeCertificate - Revoke Certificate
func (c *CertificateManagementAPIController) RevokeCertificate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	certRevocationDtoParam := CertRevocationDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&certRevocationDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCertRevocationDtoRequired(certRevocationDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCertRevocationDtoConstraints(certRevocationDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RevokeCertificate(r.Context(), uuidParam, certRevocationDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ValidateIssueCertificateAttributes - Validate list of Attributes to issue Certificate
func (c *CertificateManagementAPIController) ValidateIssueCertificateAttributes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	requestAttributeDtoParam := []RequestAttributeDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestAttributeDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range requestAttributeDtoParam {
		if err := AssertRequestAttributeDtoRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.ValidateIssueCertificateAttributes(r.Context(), uuidParam, requestAttributeDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ValidateRevokeCertificateAttributes - Validate list of Attributes to revoke certificate
func (c *CertificateManagementAPIController) ValidateRevokeCertificateAttributes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uuidParam := params["uuid"]
	if uuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"uuid"}, nil)
		return
	}
	requestAttributeDtoParam := []RequestAttributeDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestAttributeDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range requestAttributeDtoParam {
		if err := AssertRequestAttributeDtoRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.ValidateRevokeCertificateAttributes(r.Context(), uuidParam, requestAttributeDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
